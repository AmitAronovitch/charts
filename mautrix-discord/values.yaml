# Default values for mautrix-discord.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## The Matrix domain name, this is what will be used for the domain part in
## your MXIDs.
##
# serverName: 'example.com'

## The public Matrix server name, this will be used for any public URLs
## in config as well as for client API links in the ingress.
# publicServerName: 'matrix.example.com'

## The address that this appservice can use to connect to the homeserver.
## defaults to https://<publicServerName>
# serverAddress: 'http://matrix-service:8008'
## The public address that can use to connect to the homeserver.
## defaults to https://<publicServerName>
# publicServerAddress: 'https://matrix.example.com'

## Registration is the contents of registration.yaml (generated by running the image), as string
# registration: |
#   id: ""
#   url: ""
#   as_token: ""
#   hs_token: ""
#   ...

## If exists, mount as doublepuppet.yaml in the secret folder
## see https://docs.mau.fi/bridges/general/double-puppeting.html#appservice-method-new
# doublepuppetRegistration: |
#   id: doublepuppet
#   url:
#   as_token: random_text
#   hs_token: random_text
#   sender_localpart: random_text
#   rate_limited: false
#   namespaces:
#     users:
#     - regex: '@.*:example.com
#       exclusive: false

appservice:
  # (default address is autocalculated from the default service's name and the appservice port)
  # address: http://{mautrix-telegram.fullname}:29334
  hostname: 0.0.0.0
  port: 29334

  database:
    # The database type. "sqlite3-fk-wal" and "postgres" are supported.
    type: postgres
    # The database URI.
    #   SQLite: A raw file path is supported, but `file:<path>?_txlock=immediate` is recommended.
    #           https://github.com/mattn/go-sqlite3#connection-string
    #   Postgres: Connection string. For example, postgres://user:password@host/database?sslmode=disable
    #             To connect via Unix socket, use something like postgres:///dbname?host=/var/run/postgresql
    uri: postgres://user:password@host/database?sslmode=disable
  # Authentication tokens for AS <-> HS communication. Autogenerated; do not modify.
  as_token: "This value is generated when generating the registration"
  hs_token: "This value is generated when generating the registration"

bridge:
  # Shared secrets for https://github.com/devture/matrix-synapse-shared-secret-auth
  #
  # If set, double puppeting will be enabled automatically for local users
  # instead of users having to find an access token and run `login-matrix`
  # manually.
  login_shared_secret_map: {}
  #   example.com: foobar

  # Settings for backfilling messages.
  backfill:
    # Limits for forward backfilling.
    forward_limits:
      # Initial backfill (when creating portal). 0 means backfill is disabled.
      # A special unlimited value is not supported, you must set a limit. Initial backfill will
      # fetch all messages first before backfilling anything, so high limits can take a lot of time.
      initial:
        dm: 100
        channel: 70
        thread: 50
      # Missed message backfill (on startup).
      # 0 means backfill is disabled, -1 means fetch all messages since last bridged message.
      # When using unlimited backfill (-1), messages are backfilled as they are fetched.
      # With limits, all messages up to the limit are fetched first and backfilled afterwards.
      missed:
        dm: -1
        channel: 100
        thread: 100
  # End-to-bridge encryption support options.
  #
  # See https://docs.mau.fi/bridges/general/end-to-bridge-encryption.html for more info.
  encryption:
    # Default to encryption, force-enable encryption in all portals the bridge creates
    # This will cause the bridge bot to be in private chats for the encryption to work properly.
    default: true
  # Settings for provisioning API
  provisioning:
    # Shared secret for authentication. If set to "generate", a random secret will be generated,
    # or if set to "disable", the provisioning API will be disabled.
    shared_secret: generate
    # Enable debug API at /debug with provisioning authentication.
    debug_endpoints: false
  # Permissions for using the bridge.
  # Permitted values:
  #    relay - Talk through the relaybot (if enabled), no access otherwise
  #     user - Access to use the bridge to chat with a Discord account.
  #    admin - User level and some additional administration tools
  # Permitted keys:
  #        * - All Matrix users
  #   domain - All users on that homeserver
  #     mxid - Specific user
  permissions: {}

image:
  repository: dock.mau.dev/mautrix/discord
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  port: 29334

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

probes:
  enable: false
  liveness:
    failureThreshold: 5
    periodSeconds: 10
  readiness:
    failureThreshold: 5
    periodSeconds: 10
  startup:
    initialDelaySeconds: 5
    failureThreshold: 30
    periodSeconds: 10

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
