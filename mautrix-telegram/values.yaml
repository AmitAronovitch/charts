# Default values for mautrix-telegram.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## The Matrix domain name, this is what will be used for the domain part in
## your MXIDs.
##
# serverName: 'example.com'

## The public Matrix server name, this will be used for any public URLs
## in config as well as for client API links in the ingress.
# publicServerName: 'matrix.example.com'

## The address that this appservice can use to connect to the homeserver.
## defaults to https://<publicServerName>
# serverAddress: 'http://matrix-service:8008'

## Registration is the contents of registration.yaml (generated by running the image), as string
# registration: |
#   id: ""
#   url: ""
#   as_token: ""
#   hs_token: ""
#   ...

## If exists, mount as doublepuppet.yaml in the secret folder
## see https://docs.mau.fi/bridges/general/double-puppeting.html#appservice-method-new
# doublepuppetRegistration: |
#   id: doublepuppet
#   url:
#   as_token: random_text
#   hs_token: random_text
#   sender_localpart: random_text
#   rate_limited: false
#   namespaces:
#     users:
#     - regex: '@.*:example.com
#       exclusive: false

replicaCount: 1

appservice:
  hostname: 0.0.0.0
  port: 29317
  # (default address is autocalculated from the default service's name and the appservice port)
  # address: http://{mautrix-telegram.fullname}:29317
  metrics:
    enabled: false
    listen_port: 8000
  # Used by things like mautrix-manager (https://github.com/tulir/mautrix-manager).
  provisioning:
    # Whether or not the provisioning API should be enabled.
    enabled: true
    # The shared secret to authorize users of the API.
    # Set to "generate" to generate and save a new token.
    shared_secret: "some_secret_token"
  # Authentication tokens for AS <-> HS communication. Autogenerated; do not modify.
  as_token: "This value is generated when generating the registration"
  hs_token: "This value is generated when generating the registration"
  # "database" is The full URI to the database. SQLite and Postgres are supported.
  # TODO: make this a "required"/missing thing (instead of non-working default)
  # Format examples:
  #   SQLite:   sqlite:filename.db
  #   Postgres: postgres://username:password@hostname/dbname
  database: postgres://username:password@hostname/dbname

bridge:
  # Permissions for using the bridge.
  # Permitted values:
  #   relaybot - Only use the bridge via the relaybot, no access to commands.
  #       user - Relaybot level + access to commands to create bridges.
  #  puppeting - User level + logging in with a Telegram account.
  #       full - Full access to use the bridge, i.e. previous levels + Matrix login.
  #      admin - Full access to use the bridge and some extra administration commands.
  # Permitted keys:
  #        * - All Matrix users
  #   domain - All users on that homeserver
  #     mxid - Specific user
  permissions: {}
  relaybot:
    # List of usernames/user IDs who are also allowed to use the bot commands.
    whitelist: []
  encryption:
    # Default to encryption, force-enable encryption in all portals the bridge creates
    # This will cause the bridge bot to be in private chats for the encryption to work properly.
    default: true
  # If set, custom puppets will be enabled automatically for local users
  # instead of users having to find an access token and run `login-matrix`
  # manually.
  # If using this for other servers than the bridge's server,
  # you must also set the URL in the double_puppet_server_map.
  login_shared_secret_map: {}
  #  example.com: "as_token:my_token"

telegram:
  api_id: 123456
  api_hash: 0123456789abcdef0123456789abcdef
  bot_token: disabled

image:
  repository: dock.mau.dev/mautrix/telegram
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 29317
  metricsPort: 8000

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

probes:
  enable: false
  liveness:
    failureThreshold: 5
    periodSeconds: 10
  readiness:
    failureThreshold: 5
    periodSeconds: 10
  startup:
    initialDelaySeconds: 5
    failureThreshold: 30
    periodSeconds: 10

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
